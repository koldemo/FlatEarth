#include <iostream>
#include <fstream>
#include <string>
#include <new>
using namespace std;

#include "C:\Users\CLONEZILLA\Documents\Visual Studio 2008\Projects\Netcell_test\Netcell_test\definitions.h"

// Global variables, classes
Etcetera etcetera, *etcFunctions;
GlobalName globalName, *globalNameSpace;
System sys, *SYSTEM;
DomainLevelAlgebra domainLevelAlgebra, *domainLevelAlg;
unsigned __int64 TICKS_RESOLUTION;
SYS_BreakOnError SYS_breakOnError;
bool SYS_threadTrace, SYS_funcTrace, SYS_eventTrace, SYS_funcSysTrace, SYS_traceFile, SYS_deleteObjects, SYS_protTrace;

int main() {
	Identity_s sysId;
	FILE *testFileRef;
	string input;
	errno_t fileErr;
	ifstream in;
	ofstream out, outPlot, nodeLogs, centroid_SN_table;
	ANA_AnalyzeFilter_s analFilter;
	Identity_s analId;
	Analyze analyze;

	cout << "START SIMULATION\n";

	SYS_threadTrace = SYS_funcTrace = SYS_eventTrace = SYS_funcSysTrace = SYS_traceFile = SYS_deleteObjects = SYS_protTrace = false;
	SYS_breakOnError = SYS_ERR_NOBREAK;
	etcFunctions = &etcetera;
	globalNameSpace = &globalName;
	globalNameSpace->GlobalName_init();

	fileErr = fopen_s(&testFileRef, "C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\test.txt", "r");
	out.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\testOut.txt");

	if (testFileRef != 0) {
		SYSTEM = &sys;
		sysId.type = "SYSTEM";
		sysId.nickName = "-";
		SYSTEM->System_init(&sysId, out);
		SYSTEM->readTestDefinitions(testFileRef, out);
		SYSTEM->runSimulation(testFileRef, out);
		fclose(testFileRef);
	}

	cout << "END SIMULATION\n";

	out.close();

//	cout << "Analyze? (Y or N) ";
//	cin >> input;
	input = "Y";

	if (input == "Y") {
		in.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\testOut.txt");
		outPlot.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\outPlot.txt");
		nodeLogs.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\nodeLogs.txt");
		centroid_SN_table.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\centroid_SN_table.txt");
		analId.type = "ANALYZE";
		analId.nickName = "-";
		analyze.Analyze_init(&analId);
		analFilter.highestLevel = DL_GLOBAL;
		analFilter.lowestLevel = DL_LOWEST;
		analFilter.selector = OBJ_ALL;
		analyze.make_plotFile(in, analFilter, outPlot);
		in.close();
		outPlot.close();
		in.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\testOut.txt");
		analyze.extract_nodeLogs(in, analFilter, nodeLogs);
		in.close();
		nodeLogs.close();
		in.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\testOut.txt");
		analyze.analyze_centroid_SN(in, analFilter, centroid_SN_table);
		in.close();
		centroid_SN_table.close();
	};

	cout << "Thank you for using FlatEarth, press any key to exit: ";
	cin >> input;
	return(0);
};

void FORCE_EXIT(ofstream &out) {
	ifstream in;
	ofstream outPlot, nodeLogs, centroid_SN_table;
	ANA_AnalyzeFilter_s analFilter;
	Identity_s analId;
	Analyze analyze;
	string input;

//	cout << "Analyze? (Y or N) ";
//	cin >> input;

	out.close();
	input = "Y";

	if (input == "Y") {
		in.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\testOut.txt");
		outPlot.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\outPlot.txt");
		nodeLogs.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\nodeLogs.txt");
		centroid_SN_table.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\centroid_SN_table.txt");
		analId.type = "ANALYZE";
		analId.nickName = "-";
		analyze.Analyze_init(&analId);
		analFilter.highestLevel = DL_GLOBAL;
		analFilter.lowestLevel = DL_LOWEST;
		analFilter.selector = OBJ_ALL;
		analyze.make_plotFile(in, analFilter, outPlot);
		in.close();
		outPlot.close();
		in.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\testOut.txt");
		analyze.extract_nodeLogs(in, analFilter, nodeLogs);
		in.close();
		nodeLogs.close();
		in.open("C:\\Users\\CLONEZILLA\\Documents\\Visual Studio 2008\\Projects\\Netcell_test\\Debug\\testOut.txt");
		analyze.analyze_centroid_SN(in, analFilter, centroid_SN_table);
		in.close();
		centroid_SN_table.close();
	};

	cout << "Thank you for using FlatEarth, press any key to exit: ";
	cin >> input;
	exit(0);
};
